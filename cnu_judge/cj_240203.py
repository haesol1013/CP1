"""""""""
# [70점] Spiral product (권장 풀이 시간: 30분)

## 설명
Element-wise(Hadamard) product는 똑같은 형태(Shape)을 가진 두 행렬이 있을 때, 두 행렬의 같은 위치(Index)에 있는 값끼리 곱해 하나의 행렬을 반환하는 연산입니다.
선형대수를 배우기 시작한 정성윤은 Element-wise product를 배우면서 인상깊은 영감을 얻었습니다.
그래서 새로운 행렬곱 연산을 만들어보기로 했습니다.
곱해지는 행렬 A는 왼쪽에서 부터 오른쪽까지 Element-wise로 곱을 하고, 곱하는 행렬 B는 바깥쪽 값들부터 안쪽 순서대로 곱을 하는 연산을 생각했습니다.
성윤이의 아이디어 기여도를 점유하기 위해 Spiral product를 spiral_product라는 이름의 함수로 정의하세요.

cj_240203_spiral_product.png

허용 라이브러리: 없음

## 입력 설명
첫 번째 인자로 곱해지는 행렬 A가 주어집니다.
두 번째 인자로 곱하는 행렬 B가 주어집니다.
(단, 행렬 A, B의 형태는 항상 같으며, 정방형입니다.)

## 출력 설명
Spiral product의 결과로 발생하는 행렬을 2중 리스트로 반환합니다.


### 입력 예시 1 
A=[
    [1, 2, 3, 4, 5],
    [6, 7, 8, 9, 10],
    [11, 12, 13, 14, 15],
    [16, 17, 18, 19, 20],
    [21, 22, 23, 24, 25]
]

B=[
    [1, 2, 3, 4, 5],
    [16, 17, 18, 19, 6],
    [15, 24, 25, 20, 7],
    [14, 23, 22, 21, 8],
    [13, 12, 11, 10, 9]
]
### 출력 예시 1
[[1, 4, 9, 16, 25],
 [36, 49, 64, 81, 100],
 [121, 144, 169, 196, 225],
 [256, 289, 324, 361, 400],
 [441, 484, 529, 576, 625]]
 
### 입력 예시 2 
A=[
    [1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1]
]

B=[
    [1, 2, 3, 4, 5],
    [16, 17, 18, 19, 6],
    [15, 24, 25, 20, 7],
    [14, 23, 22, 21, 8],
    [13, 12, 11, 10, 9]
]
### 출력 예시 2
[[1, 2, 3, 4, 5],
 [6, 7, 8, 9, 10],
 [11, 12, 13, 14, 15],
 [16, 17, 18, 19, 20],
 [21, 22, 23, 24, 25]]
 
### 입력 예시 3 
A=[
    [1, 2, 3, 4, 5],
    [6, 7, 8, 9, 10],
    [11, 12, 13, 14, 15],
    [16, 17, 18, 19, 20],
    [21, 22, 23, 24, 25]
]

B=[
    [1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1]
]
### 출력 예시 3
[[1, 2, 3, 4, 5],
 [6, 7, 8, 9, 10],
 [11, 12, 13, 14, 15],
 [16, 17, 18, 19, 20],
 [21, 22, 23, 24, 25]]
 
### 입력 예시 4 
A=[
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

B=[
    [1, 2, 3],
    [8, 9, 4],
    [7, 6, 5]
]
### 출력 예시 4
[[1, 4, 9], 
 [16, 25, 36], 
 [49, 64, 81]]
"""""""""

def spiral_product(mat_a, mat_b):
    width = len(mat_a[0])
    arr1 = []
    for row in mat_a:
        arr1.extend(row)

    arr2 = []
    for i in range(width):
        for y in range(i, width-i):
            arr2.append(mat_b[i][y])
        for x in range(i+1, width-i-1):
            arr2.append(mat_b[x][width-i-1])
        for y in range(i, width-i):
            arr2.append(mat_b[width-i-1][width-y-1])
        for x in range(1+i, width-1-i):
            arr2.append(mat_b[width-x-1][i])
    if width % 2:
        arr2.pop()

    tmp = [i*j for i, j in zip(arr1, arr2)]
    return [tmp[i*width:width+i*width] for i in range(width)]


if __name__ == "__main__":
    arg1 = [
        [1, 2, 3, 4, 5],
        [6, 7, 8, 9, 10],
        [11, 12, 13, 14, 15],
        [16, 17, 18, 19, 20],
        [21, 22, 23, 24, 25]
    ]
    arg2 = [
        [1, 2, 3, 4, 5],
        [16, 17, 18, 19, 6],
        [15, 24, 25, 20, 7],
        [14, 23, 22, 21, 8],
        [13, 12, 11, 10, 9]
    ]
    print(spiral_product(arg1, arg2))

    # arg1 = [list(range(1+i*4, 5+i*4)) for i in range(4)]
    # print(*arg1, sep="\n")
    # arg2 = arg1.copy()
    # print(spiral_product(arg1, arg2))

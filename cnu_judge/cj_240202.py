"""""""""
# [60점] 성윤이 어딨냐

## 설명
정성윤은 시험기간만 되면 연구실에 나오지 않고 어디론가 사라지기 일쑤다.
이런 행동 패턴이 거슬렸던 이광희는 성윤이의 위치를 추적하기 위해 노트북에 몰래 소프트웨어를 설치해두었다.
그런데 실수로 코딩을 하는 걸 깜빡하고 비어있는 소프트웨어를 설치하고 만 것이다.
이 소프트웨어는 여러 와이파이를 이용해 위치를 추적한다.
와이파이는 거리가 멀어질수록 신호 세기가 급격히 줄어드는데, 와이파이 라우터들의 위치를 알고 있다면 여러 와이파이 신호 세기를 이용해 위치를 추정해낼 수 있다.
와이파이 라우터들의 신호 세기를 좌표별로 나타낸 행렬을 와이파이 필드라고 할 때, 성윤이 노트북에서 측정된 와이파이들의 신호 세기가 주어지면 가장 확률이 높은 좌표를 출력하는 함수 track을 정의하세요.
(단, 신호가 얼마나 근접한지 측정하기 위한 지표로는 오차의 절대값을 사용합니다.)

cj_240202.png

허용 라이브러리: Numpy

## 입력 설명
첫 번째 인자로 와이파이 필드 N개가 리스트로 주어집니다. 와이파이 필드는 MxM형태의 2차원 리스트(행렬)이기 때문에 N개의 행렬, 즉 3차원 리스트로 입력됩니다.
(단, 와이파이 필드는 항상 정방형으로 주어집니다.)
두 번째 인자로 성윤이의 노트북에서 측정된 와이파이의 신호 세기가 와이파이 필드 순서에 맞게 1차원 리스트로 입력됩니다.

## 출력 설명
성윤이가 있을 가능성이 가장 높은 위치를 좌표로 출력해야 합니다.
출력은 2개의 값을 가진 리스트여야 합니다.
좌표는 와이파이 필드의 가로, 세로 크기 안에서 결정됩니다.


### 입력 예시 1 
fields=[[[0, 0.1, 0.2, 0.1, 0],
  [0.1, 0.2, 0.5, 0.2, 0.1],
  [0.3, 0.6, 1, 0.6, 0.3],
  [0.1, 0.2, 0.5, 0.2, 0.1],
  [0, 0.1, 0.2, 0.1, 0]],
 [[1, 0.7, 0.4, 0.2, 0.1],
  [0.8, 0.5, 0.3, 0.1, 0],
  [0.4, 0.2, 0.1, 0, 0],
  [0.1, 0, 0, 0, 0],
  [0, 0, 0, 0, 0]],
 [[0.1, 0.3, 0.5, 0.9, 1],
  [0, 0.1, 0.3, 0.8, 0.9],
  [0, 0, 0.1, 0.6, 0.7],
  [0, 0, 0, 0.3, 0.4],
  [0, 0, 0, 0, 0.1]]]

powers=[0.099, 0.702, 0.299]
### 출력 예시 1
[0, 1]

### 입력 예시 2 
fields=[[[0.521, 0.836, 0.762, 0.644, 0.194],
  [0.767, 0.663, 1.0, 0.454, 0.424],
  [0.788, 0.973, 0.666, 0.454, 0.419],
  [0.706, 0.552, 0.417, 0.213, 0.38],
  [0.637, 0.324, 0.242, 0.277, 0.0]],
 [[0.239, 0.0, 0.338, 0.368, 0.478],
  [0.523, 0.919, 0.616, 0.455, 0.759],
  [0.478, 0.666, 0.705, 0.575, 0.714],
  [0.569, 1.0, 0.692, 0.842, 0.584],
  [0.226, 0.261, 0.782, 0.347, 0.996]],
 [[0.217, 0.583, 0.574, 0.76, 0.846],
  [0.448, 0.007, 0.635, 0.795, 0.123],
  [0.326, 0.62, 0.725, 1.0, 0.0],
  [0.762, 0.939, 0.667, 0.18, 0.457],
  [0.221, 0.431, 0.754, 0.185, 0.085]]]
  
powers=[0.42, 0.765, 0.13]
### 출력 예시 2
[1, 4]
"""""""""

import numpy as np


def track(fields, powers):
    error = np.array([abs(np.array(field) - power) for field, power in zip(fields, powers)]).sum(axis=0)
    arg_min = error.argmin()
    rows = error.shape[0]
    return [arg_min//rows, arg_min%rows]


if __name__ == "__main__":
    arg1 = np.array(
        [[[0, 0.1, 0.2, 0.1, 0],
          [0.1, 0.2, 0.5, 0.2, 0.1],
          [0.3, 0.6, 1, 0.6, 0.3],
          [0.1, 0.2, 0.5, 0.2, 0.1],
          [0, 0.1, 0.2, 0.1, 0]],
         [[1, 0.7, 0.4, 0.2, 0.1],
          [0.8, 0.5, 0.3, 0.1, 0],
          [0.4, 0.2, 0.1, 0, 0],
          [0.1, 0, 0, 0, 0],
          [0, 0, 0, 0, 0]],
         [[0.1, 0.3, 0.5, 0.9, 1],
          [0, 0.1, 0.3, 0.8, 0.9],
          [0, 0, 0.1, 0.6, 0.7],
          [0, 0, 0, 0.3, 0.4],
          [0, 0, 0, 0, 0.1]]]
    )
    arg2 = np.array([0.099, 0.702, 0.299])
    print(track(arg1, arg2))

    arg1 = np.array(
        [[[0.521, 0.836, 0.762, 0.644, 0.194],
          [0.767, 0.663, 1.0, 0.454, 0.424],
          [0.788, 0.973, 0.666, 0.454, 0.419],
          [0.706, 0.552, 0.417, 0.213, 0.38],
          [0.637, 0.324, 0.242, 0.277, 0.0]],
         [[0.239, 0.0, 0.338, 0.368, 0.478],
          [0.523, 0.919, 0.616, 0.455, 0.759],
          [0.478, 0.666, 0.705, 0.575, 0.714],
          [0.569, 1.0, 0.692, 0.842, 0.584],
          [0.226, 0.261, 0.782, 0.347, 0.996]],
         [[0.217, 0.583, 0.574, 0.76, 0.846],
          [0.448, 0.007, 0.635, 0.795, 0.123],
          [0.326, 0.62, 0.725, 1.0, 0.0],
          [0.762, 0.939, 0.667, 0.18, 0.457],
          [0.221, 0.431, 0.754, 0.185, 0.085]]]
    )
    arg2 = np.array([0.42, 0.765, 0.13])
    print(track(arg1, arg2))

